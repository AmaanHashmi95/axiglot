// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema








// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init












generator client {
provider        = "prisma-client-js"
previewFeatures = ["fullTextSearch"]
}








datasource db {
provider  = "postgresql"
url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}








model User {
id                    String           @id
username              String           @unique
displayName           String
email                 String?          @unique
passwordHash          String?
googleId              String?          @unique
avatarUrl             String?
bio                   String?
sessions              Session[]
posts                 Post[]
following             Follow[]         @relation("Following")
followers             Follow[]         @relation("Followers")
likes                 Like[]
bookmarks             Bookmark[]
comments              Comment[]
receivedNotifications Notification[]   @relation("Recipient")
issuedNotifications   Notification[]   @relation("Issuer")
lessonProgress        LessonProgress[] // Add this line for the relation to LessonProgress
videoProgress         VideoProgress[] // ✅ Add relation to VideoProgress
musicProgress  MusicProgress[]  // ✅ New: Track music progress
bookProgress  BookProgress[]  // ✅ Track user reading progress


createdAt DateTime @default(now())


@@map("users")
}


model Session {
id        String   @id
userId    String
expiresAt DateTime
user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)


@@map("sessions")
}



model Follow {
followerId  String
follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
followingId String
following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)



@@unique([followerId, followingId])
@@map("follows")
}



model Post {
id                  String         @id @default(cuid())
content             String
userId              String
user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
attachments         Media[]
likes               Like[]
bookmarks           Bookmark[]
comments            Comment[]
linkedNotifications Notification[]
language            String?        // Add this field to store the post's language
requiredLessonId    String?        // ✅ NEW: The lesson a user must complete to see this post
requiredLesson      Lesson?        @relation("LessonToPost", fields: [requiredLessonId], references: [id], onDelete: Cascade) // ✅ Define relation name

createdAt DateTime @default(now())

@@index([language])  // ✅ Index for better query performance
@@map("posts")
}


model Media {
id     String    @id @default(cuid())
postId String?
post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
type   MediaType
url    String
subtitle String?

createdAt DateTime @default(now())


@@map("post_media")
}



enum MediaType {
IMAGE
VIDEO
}


model Comment {
id      String @id @default(cuid())
content String
userId  String
user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
postId  String
post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)


createdAt DateTime @default(now())

@@map("comments")
}

model Like {
userId String
user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
postId String
post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

@@unique([userId, postId])
@@map("likes")
}

model Bookmark {
id     String @id @default(cuid())
userId String
user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
postId String
post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

createdAt DateTime @default(now())

@@unique([userId, postId])
@@map("bookmarks")
}


model Notification {
id          String           @id @default(cuid())
recipientId String
recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
issuerId    String
issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
postId      String?
post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
type        NotificationType
read        Boolean          @default(false)

createdAt DateTime @default(now())

@@map("notifications")
}



enum NotificationType {
LIKE
FOLLOW
COMMENT
}


model Course {
id          String   @id @default(cuid())
title       String
description String?
language    String?   // ✅ New: Defines which language this course belongs to
order       Int      @default(1) // ✅ Provide a default value
lessons     Lesson[] // Relation to lessons
createdAt   DateTime @default(now())
}


model Lesson {
id          String           @id @default(cuid())
title       String
language    String
description String?
courseId    String?
course      Course?          @relation(fields: [courseId], references: [id], onDelete: Cascade)
order       Int              @default(1) // ✅ Provide a default value
questions   Question[]
progress    LessonProgress[] // Add this relation field
createdAt   DateTime         @default(now())
posts       Post[]           @relation("LessonToPost") // ✅ Add this back-reference
}



model Question {
id         String    @id @default(cuid())
lessonId   String
lesson     Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
type       QuestionType
content    String
words      QuestionWord[] // ✅ New many-to-many relation for ordered words
translations  QuestionTranslation[] // ✅ Translated sentence words in order
audioUrl   String?
options       String[]
correctAnswer String
language   String?
hasTimer   Boolean @default(false)
createdAt  DateTime @default(now())
}



model Word {
id       String  @id @default(cuid())
text     String
type     WordType
questions QuestionWord[] // ✅ Many-to-many relation with Question
translations Translation[] // ✅ New relation to translations
lyrics         LyricTargetWords[] // ✅ New relation to LyricTargetWords
lyricsEnglish  LyricEnglishWords[] // ✅ New relation to LyricEnglishWords
lyricsTransliteration LyricTransliterationWords[] // ✅ New relation to LyricTransliterationWords
subtitles      SubtitleTargetWords[] // ✅ New relation to SubtitleTargetWords
subtitlesEnglish SubtitleEnglishWords[] // ✅ New relation to SubtitleEnglishWords
subtitlesTransliteration SubtitleTransliterationWords[] // ✅ New relation to SubtitleTransliterationWords
bookWords      BookWords[] // ✅ New relation to BookWords
audioUrl   String? // ✅ Add optional audio URL field
transliteration String? // ✅ New optional transliteration field
translation String? // ✅ New optional translation field
}


model Translation {
id        String @id @default(cuid())
wordId    String
word      Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)
text      String  // ✅ Possible translation for the word
language  String  // ✅ Language of this translation

questions QuestionTranslation[] // ✅ Fix: Add inverse relation
}



model QuestionWord {
questionId String
question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

wordId String
word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade)

order Int // ✅ The position of the word in the question
color String? @default("#000000") // ✅ Optional with default black color


@@id([questionId, wordId]) // ✅ Composite primary key to enforce uniqueness
}


model QuestionTranslation {
questionId String
question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

translationId String
translation   Translation @relation(fields: [translationId], references: [id], onDelete: Cascade)

order Int // ✅ Position of the translated word in the sentence
color String? @default("#000000") // ✅ Optional with default black color

@@id([questionId, translationId]) // ✅ Composite primary key
}


model LessonProgress {
id       String @id @default(cuid())
userId   String
lessonId String
user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
completed Boolean @default(false) // New field to indicate if the lesson is complete

createdAt DateTime @default(now())

@@unique([userId, lessonId]) // Add this unique constraint
}


enum QuestionType {
TRUE_FALSE
MULTIPLE_CHOICE
AUDIO_TO_TEXT
WRITTEN
TEXT_INPUT
AUDIO_PREVIEW
DRAW_INPUT
DRAG_DROP_AUDIO
LISTEN_AND_TYPE
SPEAK_ANSWER
}


enum WordType {
NOUN
VERB
PRONOUN
ADJECTIVE
}


model Song {
id        String   @id @default(uuid())
title     String
artist    String
audioUrl String?   // ✅ Store direct audio URL from Vercel Storage
imageUrl  String?   // ✅ New field to store the image URL
language  String?
musicProgress  MusicProgress[]  // ✅ New: Track user listening progress
createdAt DateTime @default(now())

englishSentences LyricEnglishSentence[] @relation("EnglishLyrics")
targetSentences  LyricTargetSentence[]  @relation("TargetLyrics")
transliterationSentences LyricTransliterationSentence[] @relation("TransliterationLyrics")

@@map("music_tracks")
}



model MusicProgress {
 id        String  @id @default(cuid())
 userId    String
 songId    String
 user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
 song      Song    @relation(fields: [songId], references: [id], onDelete: Cascade)
 listenedAt DateTime @default(now())


 @@unique([userId, songId]) // Ensure each user has a unique progress per song
}




model LyricEnglishSentence {
id       String   @id @default(uuid())
songId   String
song     Song     @relation("EnglishLyrics", fields: [songId], references: [id], onDelete: Cascade)
text     String
startTime Float  // When this sentence should appear
endTime   Float  // When this sentence should disappear
words    LyricEnglishWords[]




@@map("lyric_english_sentences")
}




model LyricTargetSentence {
id       String   @id @default(uuid())
songId   String
song     Song     @relation("TargetLyrics", fields: [songId], references: [id], onDelete: Cascade)
text     String
startTime Float
endTime   Float
words    LyricTargetWords[]




@@map("lyric_target_sentences")
}




model LyricTransliterationSentence {
id       String   @id @default(uuid())
songId   String
song     Song     @relation("TransliterationLyrics", fields: [songId], references: [id], onDelete: Cascade)
text     String
startTime Float
endTime   Float
words    LyricTransliterationWords[]




@@map("lyric_transliteration_sentences")
}




model LyricEnglishWords {
 sentenceId String
 sentence   LyricEnglishSentence @relation(fields: [sentenceId], references: [id], onDelete: Cascade)


 wordId String
 word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade) // ✅ Add relation to Word


 order     Int    // Order of the word in the sentence
 startTime Float  // When this word should be highlighted
 endTime   Float  // When this word should unhighlight


 @@id([sentenceId, wordId]) // ✅ Composite primary key for uniqueness
}




model LyricTargetWords {
 sentenceId String
 sentence   LyricTargetSentence @relation(fields: [sentenceId], references: [id], onDelete: Cascade)


 wordId String
 word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade)


 order     Int    // Order of the word in the sentence
 startTime Float  // When this word should be highlighted
 endTime   Float  // When this word should unhighlight


 @@id([sentenceId, wordId]) // ✅ Composite primary key for uniqueness
}






model LyricTransliterationWords {
 sentenceId String
 sentence   LyricTransliterationSentence @relation(fields: [sentenceId], references: [id], onDelete: Cascade)


 wordId String
 word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade) // ✅ Add relation to Word


 order     Int
 startTime Float
 endTime   Float


 @@id([sentenceId, wordId]) // ✅ Composite primary key
}





model Video {
id        String   @id @default(uuid())
title     String
genre    String
videoUrl String?   // ✅ Store direct audio URL from Vercel Storage
imageUrl  String?   // ✅ New field to store the image URL
language  String?
createdAt DateTime @default(now())
englishSentences SubtitleEnglishSentence[] @relation("EnglishSubtitles")
targetSentences  SubtitleTargetSentence[]  @relation("TargetSubtitles")
transliterationSentences SubtitleTransliterationSentence[] @relation("TransliterationSubtitles")
videoProgress VideoProgress[] // ✅ Add relation to VideoProgress




@@map("tv_shows")
}




model VideoProgress {
 id        String  @id @default(cuid())
 userId    String
 videoId   String
 user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
 video     Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
 watchedAt DateTime @default(now())


 @@unique([userId, videoId]) // Ensure each user has unique video progress per video
}






model SubtitleEnglishSentence {
id       String   @id @default(uuid())
videoId   String
video     Video     @relation("EnglishSubtitles", fields: [videoId], references: [id], onDelete: Cascade)
text     String
startTime Float  // When this sentence should appear
endTime   Float  // When this sentence should disappear
words    SubtitleEnglishWords[]




@@map("subtitle_english_sentences")
}




model SubtitleTargetSentence {
id       String   @id @default(uuid())
videoId   String
video     Video     @relation("TargetSubtitles", fields: [videoId], references: [id], onDelete: Cascade)
text     String
startTime Float
endTime   Float
words    SubtitleTargetWords[]




@@map("subtitle_target_sentences")
}




model SubtitleTransliterationSentence {
id       String   @id @default(uuid())
videoId   String
video     Video     @relation("TransliterationSubtitles", fields: [videoId], references: [id], onDelete: Cascade)
text     String
startTime Float
endTime   Float
words    SubtitleTransliterationWords[]




@@map("subtitle_transliteration_sentences")
}




model SubtitleEnglishWords {
sentenceId String
sentence  SubtitleEnglishSentence @relation(fields: [sentenceId], references: [id], onDelete: Cascade)
wordId String
 word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade) // ✅ Add relation to Word


 order     Int
 startTime Float
 endTime   Float


 @@id([sentenceId, wordId]) // ✅ Composite primary key
}




model SubtitleTargetWords {
sentenceId String
sentence  SubtitleTargetSentence @relation(fields: [sentenceId], references: [id], onDelete: Cascade)
wordId String
word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade)
order     Int
startTime Float
endTime   Float




@@id([sentenceId, wordId]) // ✅ Composite primary key for uniqueness
}




model SubtitleTransliterationWords {
sentenceId String
sentence  SubtitleTransliterationSentence @relation(fields: [sentenceId], references: [id], onDelete: Cascade)
wordId String
 word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade) // ✅ Add relation to Word


 order     Int
 startTime Float
 endTime   Float


 @@id([sentenceId, wordId]) // ✅ Composite primary key
}










model Book {
id        String   @id @default(uuid())
title     String
author    String
genre    String
imageUrl  String?   // ✅ New field to store the image URL
language  String?
createdAt DateTime @default(now())
bookPages BookPage[] @relation("BookPage")
bookProgress  BookProgress[]  // ✅ Track progress for each book
@@map("reading_books")
}


model BookProgress {
 id        String  @id @default(cuid())
 userId    String
 bookId    String
 pageNumber Int    @default(0) // ✅ Track last page read
 user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
 book      Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
 lastReadAt DateTime @default(now())


 @@unique([userId, bookId]) // Ensure each user has a unique progress per book
}




model BookPage {
id       String   @id @default(uuid())
order    Int
bookId   String
book     Book     @relation("BookPage", fields: [bookId], references: [id], onDelete: Cascade)
bookSentences BookSentence[] @relation("BookSentence")
createdAt DateTime @default(now())


@@map("book_pages")
}






model BookSentence {
id       String   @id @default(uuid())
bookPageId   String
bookPage     BookPage     @relation("BookSentence", fields: [bookPageId], references: [id], onDelete: Cascade)
text     String
translation String
transliteration String
order    Int
words    BookWords[] @relation("BookWords")
createdAt DateTime @default(now())


@@map("book_sentences")
}






model BookWords {
id       String   @id @default(uuid())
bookSentenceId   String
bookSentences     BookSentence     @relation("BookWords", fields: [bookSentenceId], references: [id], onDelete: Cascade)
wordId   String
word     Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
translation String?  // ✅ Store per-word translation
transliteration String?  // ✅ Store per-word transliteration
color String? @default("#000000") // ✅ Optional with default black color
order    Int
translationOrder Int? // ✅ Separate order for translation
transliterationOrder Int? // ✅ Separate order for transliteration
createdAt DateTime @default(now())


@@map("book_words")
}










