// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    String           @id
  username              String           @unique
  displayName           String
  email                 String?          @unique
  passwordHash          String?
  googleId              String?          @unique
  avatarUrl             String?
  bio                   String?
  sessions              Session[]
  posts                 Post[]
  following             Follow[]         @relation("Following")
  followers             Follow[]         @relation("Followers")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  receivedNotifications Notification[]   @relation("Recipient")
  issuedNotifications   Notification[]   @relation("Issuer")
  lessonProgress        LessonProgress[] // Add this line for the relation to LessonProgress

  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  lessons     Lesson[] // Relation to lessons
  createdAt   DateTime @default(now())
}

model Lesson {
  id          String           @id @default(cuid())
  title       String
  language    String
  description String?
  courseId    String?
  course      Course?          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   Question[]
  progress    LessonProgress[] // Add this relation field
  createdAt   DateTime         @default(now())
}

model Question {
  id            String       @id @default(cuid())
  lessonId      String
  lesson        Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type          QuestionType
  content       String
  audioUrl      String?
  options       String[] // Store options for multiple-choice
  correctAnswer String
  language      String? // Add this field to store the question's language
  hasTimer      Boolean      @default(false) // Determines if the question has a timer

  createdAt DateTime @default(now())
}

model LessonProgress {
  id       String @id @default(cuid())
  userId   String
  lessonId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  progress Int    @default(0)

  createdAt DateTime @default(now())
}

enum QuestionType {
  TRUE_FALSE
  MULTIPLE_CHOICE
  AUDIO_TO_TEXT
  WRITTEN
  TEXT_INPUT
  AUDIO_PREVIEW
  DRAW_INPUT
  DRAG_DROP_AUDIO
  LISTEN_AND_TYPE
  SPEAK_ANSWER
}